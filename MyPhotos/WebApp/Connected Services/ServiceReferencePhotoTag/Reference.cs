//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReferencePhotoTag
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tag", Namespace="http://schemas.datacontract.org/2004/07/ModelWCF", IsReference=true)]
    public partial class Tag : object
    {
        
        private string NameField;
        
        private System.Collections.Generic.List<ServiceReferencePhotoTag.Photo> PhotosField;
        
        private int TagIdField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ServiceReferencePhotoTag.Photo> Photos
        {
            get
            {
                return this.PhotosField;
            }
            set
            {
                this.PhotosField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TagId
        {
            get
            {
                return this.TagIdField;
            }
            set
            {
                this.TagIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Photo", Namespace="http://schemas.datacontract.org/2004/07/ModelWCF", IsReference=true)]
    public partial class Photo : object
    {
        
        private System.DateTime CreatedAtField;
        
        private bool DeletedField;
        
        private string PathField;
        
        private int PhotoIdField;
        
        private System.Collections.Generic.List<ServiceReferencePhotoTag.Tag> TagsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedAt
        {
            get
            {
                return this.CreatedAtField;
            }
            set
            {
                this.CreatedAtField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Deleted
        {
            get
            {
                return this.DeletedField;
            }
            set
            {
                this.DeletedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PhotoId
        {
            get
            {
                return this.PhotoIdField;
            }
            set
            {
                this.PhotoIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ServiceReferencePhotoTag.Tag> Tags
        {
            get
            {
                return this.TagsField;
            }
            set
            {
                this.TagsField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferencePhotoTag.IPhotoTag")]
    public interface IPhotoTag
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoTag/AddTag", ReplyAction="http://tempuri.org/IPhotoTag/AddTagResponse")]
        System.Threading.Tasks.Task<int> AddTagAsync(ServiceReferencePhotoTag.Tag tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoTag/AddPhoto", ReplyAction="http://tempuri.org/IPhotoTag/AddPhotoResponse")]
        System.Threading.Tasks.Task<int> AddPhotoAsync(ServiceReferencePhotoTag.Photo photo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoTag/AddTagToPhoto", ReplyAction="http://tempuri.org/IPhotoTag/AddTagToPhotoResponse")]
        System.Threading.Tasks.Task<int> AddTagToPhotoAsync(ServiceReferencePhotoTag.Photo photo, ServiceReferencePhotoTag.Tag tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoTag/GetTag", ReplyAction="http://tempuri.org/IPhotoTag/GetTagResponse")]
        System.Threading.Tasks.Task<ServiceReferencePhotoTag.Tag> GetTagAsync(ServiceReferencePhotoTag.Tag tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoTag/GetAllTags", ReplyAction="http://tempuri.org/IPhotoTag/GetAllTagsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotoTag.Tag>> GetAllTagsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoTag/GetTagsOfType", ReplyAction="http://tempuri.org/IPhotoTag/GetTagsOfTypeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotoTag.Tag>> GetTagsOfTypeAsync(string tagType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoTag/GetTagsOfPhoto", ReplyAction="http://tempuri.org/IPhotoTag/GetTagsOfPhotoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotoTag.Tag>> GetTagsOfPhotoAsync(ServiceReferencePhotoTag.Photo photo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoTag/GetAllPhotos", ReplyAction="http://tempuri.org/IPhotoTag/GetAllPhotosResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotoTag.Photo>> GetAllPhotosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoTag/GetPhotosWithTags", ReplyAction="http://tempuri.org/IPhotoTag/GetPhotosWithTagsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotoTag.Photo>> GetPhotosWithTagsAsync(System.Collections.Generic.List<ServiceReferencePhotoTag.Tag> tags);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoTag/GetPhotoByPath", ReplyAction="http://tempuri.org/IPhotoTag/GetPhotoByPathResponse")]
        System.Threading.Tasks.Task<ServiceReferencePhotoTag.Photo> GetPhotoByPathAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoTag/UpdatePhotoPath", ReplyAction="http://tempuri.org/IPhotoTag/UpdatePhotoPathResponse")]
        System.Threading.Tasks.Task<int> UpdatePhotoPathAsync(string oldPath, string newPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoTag/DeleteTag", ReplyAction="http://tempuri.org/IPhotoTag/DeleteTagResponse")]
        System.Threading.Tasks.Task<int> DeleteTagAsync(ServiceReferencePhotoTag.Tag tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoTag/DeletePhoto", ReplyAction="http://tempuri.org/IPhotoTag/DeletePhotoResponse")]
        System.Threading.Tasks.Task<int> DeletePhotoAsync(ServiceReferencePhotoTag.Photo photo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoTag/DeleteTagFromPhoto", ReplyAction="http://tempuri.org/IPhotoTag/DeleteTagFromPhotoResponse")]
        System.Threading.Tasks.Task DeleteTagFromPhotoAsync(ServiceReferencePhotoTag.Photo photo, ServiceReferencePhotoTag.Tag tag);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IPhotoTagChannel : ServiceReferencePhotoTag.IPhotoTag, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class PhotoTagClient : System.ServiceModel.ClientBase<ServiceReferencePhotoTag.IPhotoTag>, ServiceReferencePhotoTag.IPhotoTag
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PhotoTagClient() : 
                base(PhotoTagClient.GetDefaultBinding(), PhotoTagClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IPhotoTag.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PhotoTagClient(EndpointConfiguration endpointConfiguration) : 
                base(PhotoTagClient.GetBindingForEndpoint(endpointConfiguration), PhotoTagClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PhotoTagClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PhotoTagClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PhotoTagClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PhotoTagClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PhotoTagClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<int> AddTagAsync(ServiceReferencePhotoTag.Tag tag)
        {
            return base.Channel.AddTagAsync(tag);
        }
        
        public System.Threading.Tasks.Task<int> AddPhotoAsync(ServiceReferencePhotoTag.Photo photo)
        {
            return base.Channel.AddPhotoAsync(photo);
        }
        
        public System.Threading.Tasks.Task<int> AddTagToPhotoAsync(ServiceReferencePhotoTag.Photo photo, ServiceReferencePhotoTag.Tag tag)
        {
            return base.Channel.AddTagToPhotoAsync(photo, tag);
        }
        
        public System.Threading.Tasks.Task<ServiceReferencePhotoTag.Tag> GetTagAsync(ServiceReferencePhotoTag.Tag tag)
        {
            return base.Channel.GetTagAsync(tag);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotoTag.Tag>> GetAllTagsAsync()
        {
            return base.Channel.GetAllTagsAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotoTag.Tag>> GetTagsOfTypeAsync(string tagType)
        {
            return base.Channel.GetTagsOfTypeAsync(tagType);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotoTag.Tag>> GetTagsOfPhotoAsync(ServiceReferencePhotoTag.Photo photo)
        {
            return base.Channel.GetTagsOfPhotoAsync(photo);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotoTag.Photo>> GetAllPhotosAsync()
        {
            return base.Channel.GetAllPhotosAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotoTag.Photo>> GetPhotosWithTagsAsync(System.Collections.Generic.List<ServiceReferencePhotoTag.Tag> tags)
        {
            return base.Channel.GetPhotosWithTagsAsync(tags);
        }
        
        public System.Threading.Tasks.Task<ServiceReferencePhotoTag.Photo> GetPhotoByPathAsync(string path)
        {
            return base.Channel.GetPhotoByPathAsync(path);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePhotoPathAsync(string oldPath, string newPath)
        {
            return base.Channel.UpdatePhotoPathAsync(oldPath, newPath);
        }
        
        public System.Threading.Tasks.Task<int> DeleteTagAsync(ServiceReferencePhotoTag.Tag tag)
        {
            return base.Channel.DeleteTagAsync(tag);
        }
        
        public System.Threading.Tasks.Task<int> DeletePhotoAsync(ServiceReferencePhotoTag.Photo photo)
        {
            return base.Channel.DeletePhotoAsync(photo);
        }
        
        public System.Threading.Tasks.Task DeleteTagFromPhotoAsync(ServiceReferencePhotoTag.Photo photo, ServiceReferencePhotoTag.Tag tag)
        {
            return base.Channel.DeleteTagFromPhotoAsync(photo, tag);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPhotoTag))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPhotoTag))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return PhotoTagClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IPhotoTag);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return PhotoTagClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IPhotoTag);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IPhotoTag,
        }
    }
}
